{"version":3,"sources":["components/Dialogs/Dialogs.module.sass","components/Dialogs/DialogItem/DialogItem.tsx","components/Dialogs/Message/Message.tsx","components/Dialogs/AddMessageForm/AddMessageForm.tsx","components/Dialogs/Dialogs.tsx","hoc/withAuthRedirect.tsx","components/Dialogs/DialogsContainer.tsx"],"names":["module","exports","DialogItem","props","className","s","nameDialog","name","Message","messageOver","message","maxLength50","maxLengthCreator","reduxForm","form","onSubmit","handleSubmit","createField","required","Textarea","Dialogs","state","dialogsPage","dialogsElements","dialogs","map","d","key","id","messagesElements","messages","m","dialogsItems","values","sendMessage","newMessageBody","mapStateToPropsForRedirect","isAuth","Auth","compose","connect","DialogsPage","actions","WrappedComponent","restProps","to"],"mappings":"6FACAA,EAAOC,QAAU,CAAC,QAAU,yBAAyB,aAAe,8BAA8B,WAAa,4BAA4B,aAAe,8BAA8B,YAAc,+B,qFCO/L,SAASC,EAAYC,GAC1B,OACE,yBAAKC,UAAWC,IAAEC,YAChB,kCAAQH,EAAMI,KAAd,MCHC,SAASC,EAASL,GACvB,OACE,yBAAKC,UAAYC,IAAEI,aACjB,8BAAON,EAAMO,U,8BCJbC,EAAcC,YAAiB,IAmBtBC,cAAoC,CAACC,KAAM,2BAA3CD,EAbX,SAACV,GACH,OACE,0BAAMY,SAAUZ,EAAMa,cACpB,6BACGC,YAA0C,qBAAsB,iBAAkB,CAACC,IAAUP,GAAcQ,MAE9G,6BACE,6CCmBOC,EAvBsB,SAACjB,GACpC,IAAIkB,EAAQlB,EAAMmB,YAEdC,EAAkBF,EAAMG,QAAQC,KAAK,SAAAC,GAAC,OAAI,kBAACxB,EAAD,CAAYK,KAAMmB,EAAEnB,KAAMoB,IAAKD,EAAEE,GAAIA,GAAIF,EAAEE,QACrFC,EAAmBR,EAAMS,SAASL,KAAK,SAAAM,GAAC,OAAI,kBAACvB,EAAD,CAASE,QAASqB,EAAErB,QAASiB,IAAKI,EAAEH,GAAKA,GAAIG,EAAEH,QAM/F,OACE,yBAAKxB,UAAWC,IAAEmB,SAChB,yBAAKpB,UAAWC,IAAE2B,cACdT,GAEJ,yBAAKnB,UAAWC,IAAEyB,UAChB,6BAAOD,IAET,kBAAC,EAAD,CAAgBd,SAZA,SAACkB,GACnB9B,EAAM+B,YAAYD,EAAOE,qB,uBClBvBC,EAA6B,SAAEf,GAAF,MAA2B,CAC7DgB,OAAQhB,EAAMiB,KAAKD,S,qBCQLE,sBACbC,aAPoB,SAACnB,GACrB,MAAO,CACLC,YAAaD,EAAMoB,eAKd,eAAsBC,ODDxB,SAAgCC,GAQrC,OAAOH,YAA2DJ,EAA4B,GAAvFI,EAN+D,SAACrC,GAAW,IAC3EkC,EAAwBlC,EAAxBkC,OAAWO,EAD+D,YAClDzC,EADkD,YAE/E,OAAKkC,EACE,kBAACM,EAAqBC,GADT,kBAAC,IAAD,CAAUC,GAAG,gBCJtBN,CAGbnB","file":"static/js/4.c7983ede.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"dialogs\":\"Dialogs_dialogs__fvJMV\",\"dialogsItems\":\"Dialogs_dialogsItems__1Less\",\"nameDialog\":\"Dialogs_nameDialog__1Hvqt\",\"messagesOver\":\"Dialogs_messagesOver__3cusD\",\"messageOver\":\"Dialogs_messageOver__10OZK\"};","import React from 'react';\nimport s from './../Dialogs.module.sass';\n\ntype DialogItemType = {\n  name: string\n  id: number\n}\n\nexport function DialogItem (props: DialogItemType) {\n  return (\n    <div className={s.nameDialog}>\n      <span> {props.name} </span>\n    </div>\n  )\n}","import React from 'react';\nimport s from './../Dialogs.module.sass';\n\nexport type MessagesType = {\n  id: number\n  message: string\n}\n\nexport function Message (props: MessagesType) {\n  return (\n    <div className={ s.messageOver }>\n      <span>{props.message}</span>\n    </div>\n  )\n}","import React from 'react';\nimport {Field, InjectedFormProps, reduxForm} from \"redux-form\";\nimport {createField, GetStringKeys, Input, Textarea} from '../../common/FormsControls/FormsControls';\nimport {maxLengthCreator, required} from \"../../../utils/validators/validators\";\nimport {NewMessageFormValuesType} from '../Dialogs';\n\n\nconst maxLength50 = maxLengthCreator(50);\n\ntype NewMessageFormValuesKeysType = GetStringKeys<NewMessageFormValuesType>\ntype PropsType = {}\n\nconst AddMessageForm: React.FC<InjectedFormProps<NewMessageFormValuesType, PropsType> & PropsType>\n  = (props) => {\n  return (\n    <form onSubmit={props.handleSubmit}>\n      <div>\n        {createField<NewMessageFormValuesKeysType>(\"Enter your message\", 'newMessageBody', [required, maxLength50], Textarea)}\n      </div>\n      <div>\n        <button>Send</button>\n      </div>\n    </form>\n  )\n}\n\nexport default reduxForm<NewMessageFormValuesType>({form: 'dialog-add-message-form'})(AddMessageForm);","import React from 'react'\nimport s from './Dialogs.module.sass'\nimport { DialogItem } from './DialogItem/DialogItem'\nimport { Message } from \"./Message/Message\"\nimport {InitialStateType} from \"../../redux/dialogs-reducer\"\nimport AddMessageForm from \"./AddMessageForm/AddMessageForm\"\n\ntype PropsType = {\n  dialogsPage: InitialStateType\n  sendMessage: (messageText: string) => void\n}\n\nexport type NewMessageFormValuesType = {\n  newMessageBody: string\n}\n\nconst Dialogs: React.FC<PropsType> = (props) => {\n  let state = props.dialogsPage\n\n  let dialogsElements = state.dialogs.map( d => <DialogItem name={d.name} key={d.id} id={d.id} />  );\n  let messagesElements = state.messages.map( m => <Message message={m.message} key={m.id}  id={m.id}/> );\n\n  let addNewMessage = (values: NewMessageFormValuesType) => {\n    props.sendMessage(values.newMessageBody);\n  }\n\n  return (\n    <div className={s.dialogs}>\n      <div className={s.dialogsItems}>\n        { dialogsElements }\n      </div>\n      <div className={s.messages}>\n        <div>{ messagesElements }</div>\n      </div>\n      <AddMessageForm onSubmit={addNewMessage} />\n    </div>\n  )\n}\n\nexport default Dialogs\n","import React from 'react'\nimport {Redirect} from \"react-router-dom\";\nimport {connect} from \"react-redux\";\nimport {AllAppTypes} from \"../redux/redux-store\";\n\nconst mapStateToPropsForRedirect = ( state: AllAppTypes ) => ({\n\tisAuth: state.Auth.isAuth\n}as const)\n\ntype MapPropsType = {\n  isAuth: boolean\n}\ntype DispatchPropsType = {}\n\nexport function withAuthRedirect<WCP>( WrappedComponent: React.ComponentType<WCP> ) {\n\n  const RedirectComponent: React.FC<MapPropsType & DispatchPropsType> = (props) => {\n    let {isAuth, ...restProps} = props\n    if (!isAuth) return <Redirect to='/login'/>\n    return <WrappedComponent {...restProps as WCP}/>\n  }\n\n  return connect<MapPropsType, DispatchPropsType, WCP, AllAppTypes>(mapStateToPropsForRedirect, {})(RedirectComponent)\n}","import React  from 'react'\nimport Dialogs from \"./Dialogs\"\nimport {connect} from \"react-redux\"\nimport { AllAppTypes } from '../../redux/redux-store'\nimport {withAuthRedirect} from \"../../hoc/withAuthRedirect\"\nimport { compose } from 'redux'\nimport {actions} from \"../../redux/dialogs-reducer\";\n\nlet mapStateToProps = (state: AllAppTypes) => {\n  return {\n    dialogsPage: state.DialogsPage\n  }\n}\n\nexport default compose<React.ComponentType>(\n  connect(mapStateToProps, {...actions}),\n  withAuthRedirect\n)(Dialogs)\n"],"sourceRoot":""}