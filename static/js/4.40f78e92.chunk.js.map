{"version":3,"sources":["hoc/withAuthRedirect.tsx","components/Profile/Profile.module.sass","components/Profile/Post.tsx","components/Profile/ProfileInfoHooks.tsx","components/Profile/Profile.tsx","components/Profile/ProfileContainer.tsx"],"names":["mapStateToPropsForRedirect","state","isAuth","Auth","withAuthRedirect","Component","RedirectComponent","this","props","to","React","connect","module","exports","Post","className","s","PostOverlay","message","likesCount","ProfileInfoHooks","useState","editMode","setEditMode","status","setStatus","useEffect","profileInfoOverlay","onDoubleClick","onChange","e","currentTarget","value","autoFocus","onBlur","updateStatus","maxLength30","maxLengthCreator","Profile","memo","onAddPost","values","addPost","newPostText","AddNewPostForm","onSubmit","handleSubmit","Field","placeholder","name","component","Textarea","validate","required","reduxForm","form","profile","imgProfile","src","profileInfo","photos","large","alt","description","aboutMe","OverlayContact","contacts","facebook","href","github","instagram","mainLink","twitter","vk","website","newPost","OverlayPosts","posts","map","el","key","id","ProfileContainer","userId","match","params","authorizedUserId","history","push","getUserProfile","getStatus","isFetching","Preloader","compose","ProfilePage","setIsFetching","withRouter"],"mappings":"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","file":"static/js/4.40f78e92.chunk.js","sourcesContent":["import React from 'react'\nimport {Redirect} from \"react-router-dom\";\nimport {connect} from \"react-redux\";\nimport {AllAppTypes} from \"../redux/redux-store\";\n\nconst mapStateToPropsForRedirect = ( state: AllAppTypes ) => ({\n\tisAuth: state.Auth.isAuth\n})\n\nexport const withAuthRedirect = ( Component: any ) => {\n\tclass RedirectComponent extends React.Component<any, any> {\n\t\trender() {\n\t\t\tif (!this.props.isAuth) return <Redirect to = '/login' />\n\t\t\treturn <Component {...this.props} />\n\t\t}\n\t}\n\treturn connect(mapStateToPropsForRedirect)(RedirectComponent)\n}","// extracted by mini-css-extract-plugin\nmodule.exports = {\"profile\":\"Profile_profile__BfM_w\",\"imgProfile\":\"Profile_imgProfile__1jOvb\",\"description\":\"Profile_description__2fFJz\",\"OverlayPosts\":\"Profile_OverlayPosts__v2jJP\",\"PostOverlay\":\"Profile_PostOverlay__1X9k5\"};","import React from 'react';\nimport s from './Profile.module.sass'\nimport { PostPropsType } from \"../../redux/profilepage-reducer\";\n\nexport function Post ( props: PostPropsType ) {\n  return (\n    <div className={ s.PostOverlay }>\n      <p>{ props.message }</p>\n      <p>{ props.likesCount }</p>\n    </div>\n  )\n}","import React, {ChangeEvent, useEffect, useState} from 'react'\nimport s from \"./Profile.module.sass\"\n\ntype ProfileInfoType = {\n\tstatus: string\n\tupdateStatus: (status: string) => void\n}\n\nconst ProfileInfoHooks:React.FC <ProfileInfoType> = (props) => {\n\n\tlet [editMode, setEditMode] = useState(false)\n\tlet [status, setStatus] = useState(props.status)\n\n\tuseEffect( () => {\n\t\tsetStatus(props.status)\n\t},[props.status])\n\n\tconst activateEditMode = () => {\n\t\tsetEditMode(true)\n\t}\n\tconst deactivateEditMode = () => {\n\t\tsetEditMode(false)\n\t\tprops.updateStatus(status)\n\t}\n\tconst onStatusChange = (e: ChangeEvent<HTMLInputElement>) => {\n\t\tsetStatus(e.currentTarget.value)\n\t}\n\n\treturn (\n\t\t<div className={ s.profileInfoOverlay }>\n\t\t\t{ !editMode &&\n\t\t\t\t<div>\n\t\t\t\t\t<span onDoubleClick={ activateEditMode }> {props.status || 'My status'} </span>\n\t\t\t\t</div>\n\t\t\t}\n\t\t\t{ editMode &&\n\t\t\t\t<div>\n            <input onChange = {onStatusChange}\n                   autoFocus = {true}\n                   onBlur = {deactivateEditMode}\n                   value = {status}\n            />\n\t\t\t\t</div>\n\t\t\t}\n\t\t</div>\n\t)\n}\n\nexport default ProfileInfoHooks","import React, { ChangeEvent } from 'react';\nimport { Post } from './Post';\nimport s from './Profile.module.sass';\nimport {PostPropsType, profileInfoType} from \"../../redux/profilepage-reducer\";\nimport {Field, reduxForm} from \"redux-form\";\nimport {maxLengthCreator, required} from \"../../Utils/Validators/validators\";\nimport {Textarea} from \"../common/FormsControls/FormsControls\";\nimport ProfileInfoHooks from \"./ProfileInfoHooks\";\n\nexport type ProfilePropsType = {\n  profileInfo: profileInfoType | null\n  posts: Array<PostPropsType>\n  // messageForNewPost: string\n  // postOnChange: (e: ChangeEvent<HTMLInputElement>) => void\n  addPost: (postText: string) => void\n  isFetching: boolean\n  status: string\n  updateStatus: (status: string) => void\n}\n\nconst maxLength30 = maxLengthCreator(30)\n\nexport const Profile: React.FC<ProfilePropsType> = React.memo (( props: ProfilePropsType) => {\n\n  let onAddPost = (values: any) => {\n    props.addPost(values.newPostText)\n  }\n\n  function AddNewPostForm (props: any) {\n    return (\n      <form onSubmit={props.handleSubmit}>\n        <Field placeholder='my new post'\n               name ='newPostText'\n               component = {Textarea}\n               validate={[required, maxLength30]}\n        />\n        <button onSubmit={onAddPost}> add post </button>\n      </form>\n    )\n  }\n\n  // @ts-ignore\n  AddNewPostForm = reduxForm({form: 'ProfileAddNewPostForm'})(AddNewPostForm)\n\n  return <>\n     <div className = {s.profile}>\n       <img className = {s.imgProfile} src = {props.profileInfo?.photos.large} alt=\"\"/>\n       <div className={s.description}>\n         <span>{props.profileInfo?.aboutMe}</span>\n       </div>\n       <div className={s.OverlayContact}>\n         <ul>\n           { props.profileInfo?.contacts.facebook ?\n             <li><a href={props.profileInfo?.contacts.facebook}>\n               {props.profileInfo?.contacts.facebook}</a></li> : null }\n\n           { props.profileInfo?.contacts.github ?\n             <li><a href={props.profileInfo?.contacts.github}>\n               {props.profileInfo?.contacts.github}</a></li> : null}\n\n           { props.profileInfo?.contacts.instagram ?\n             <li><a href={props.profileInfo?.contacts.instagram}>\n               {props.profileInfo?.contacts.instagram}</a></li> : null}\n\n           { props.profileInfo?.contacts.mainLink ?\n             <li><a href={props.profileInfo?.contacts.mainLink}>\n               {props.profileInfo?.contacts.mainLink}</a></li> : null}\n\n           { props.profileInfo?.contacts.twitter ?\n             <li><a href={props.profileInfo?.contacts.twitter}>\n               {props.profileInfo?.contacts.twitter}</a></li> : null}\n\n           { props.profileInfo?.contacts.vk ?\n             <li><a href={props.profileInfo?.contacts.vk}>\n               {props.profileInfo?.contacts.vk}</a></li> : null}\n\n           { props.profileInfo?.contacts.website ?\n             <li><a href={props.profileInfo?.contacts.website}>\n             {props.profileInfo?.contacts.website}</a></li> : null }\n         </ul>\n       </div>\n       <ProfileInfoHooks status = {props.status}\n                    updateStatus = {props.updateStatus} />\n       <hr />\n       <div className={s.newPost}>\n         <AddNewPostForm onSubmit={onAddPost}/>\n       </div>\n       <div className={s.OverlayPosts}>\n         {\n           props.posts.map( (el: PostPropsType) => (\n           <Post\n                 key = {el.id}\n                 id = {el.id}\n                 message = {el.message}\n                 likesCount = {el.likesCount}\n           />\n           ))\n         }\n       </div>\n     </div>\n  </>\n})","import React from 'react'\nimport { Profile } from \"./Profile\"\nimport {\n  addPost, setIsFetching, updateStatus,\n  PostPropsType, profileInfoType, getUserProfile, getStatus\n} from \"../../redux/profilepage-reducer\"\nimport { connect } from \"react-redux\"\nimport { AllAppTypes } from \"../../redux/redux-store\"\nimport { Preloader } from \"../common/Preloader/Preloader\"\nimport { withRouter, RouteComponentProps } from 'react-router-dom'\nimport { withAuthRedirect } from \"../../hoc/withAuthRedirect\"\nimport { compose } from \"redux\"\n\ntype mapStateToPropsType = {\n  profileInfo: profileInfoType | null\n  posts: Array<PostPropsType>\n  isFetching: boolean\n  status: string\n  isAuth: boolean\n  authorizedUserId: number | null\n}\ntype mapDispatchToPropsType = {\n  addPost: (postText: string) => void\n  setIsFetching: (isFetching: boolean) => void\n  getUserProfile: (userId: number) => void\n  getStatus: (userId: number) => void\n  updateStatus: (status: string) => void\n}\n\ntype ProfileContainerPT = mapStateToPropsType & mapDispatchToPropsType\n\ntype PathParamsType = {\n  userId: any\n}\n\ntype PropsType = RouteComponentProps<PathParamsType> & ProfileContainerPT\n\nclass ProfileContainer extends React.Component<PropsType> {\n\n  componentDidMount() {\n    let userId = this.props.match.params.userId\n    if (!userId) {\n      userId = this.props.authorizedUserId\n      if (!userId) {\n        this.props.history.push('/login')\n      }\n    }\n    this.props.getUserProfile (userId)\n    this.props.getStatus( userId )\n  }\n  addPost = ( newPostText: string) => {\n    this.props.addPost( newPostText );\n  }\n  // old version\n  // shouldComponentUpdate(nextProps: Readonly<PropsType>, nextState: Readonly<{}>, nextContext: any): boolean {\n  //   return nextProps != this.props || nextState != this.state\n  // }\n\n  render () {\n    return <>\n      {this.props.isFetching ? <Preloader/> : null }\n      <Profile\n        isFetching = {this.props.isFetching}\n        profileInfo = { this.props.profileInfo}\n        posts = { this.props.posts }\n        addPost={ this.addPost }\n        status = { this.props.status }\n        updateStatus = { this.props.updateStatus }\n      />\n    </>\n  }\n}\n\nconst mapStateToProps = ( state: AllAppTypes ): mapStateToPropsType => {\n  return {\n    profileInfo: state.ProfilePage.profileInfo,\n    posts :  state.ProfilePage.posts,\n    isFetching: state.ProfilePage.isFetching,\n    status: state.ProfilePage.status,\n    authorizedUserId: state.Auth.userId,\n    isAuth: state.Auth.isAuth\n  }\n}\n\nexport default compose<React.ComponentType> (\n  connect< mapStateToPropsType, mapDispatchToPropsType, {}, AllAppTypes>(mapStateToProps,\n    { addPost, getUserProfile, getStatus, updateStatus, setIsFetching }),\n  withRouter,\n  withAuthRedirect\n)(ProfileContainer)"],"sourceRoot":""}