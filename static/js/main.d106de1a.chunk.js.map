{"version":3,"sources":["components/common/Paginator/Paginator.module.sass","api/profile-api.ts","redux/profile-reducer.ts","redux/dialogs-reducer.ts","components/common/Preloader/preloader.module.sass","img/preloader.gif","img/userPhotoDef.png","api/api.ts","serviceWorker.ts","api/auth-api.ts","api/security-api.ts","redux/auth-reducer.ts","redux/app-reducer.ts","utils/object-helper.ts","api/users-api.ts","redux/users-reducer.ts","redux/redux-store.ts","hoc/withSuspense.tsx","components/Login/LoginPage.tsx","redux/users-selectors.ts","components/common/Paginator/Paginator.tsx","components/Users/User.tsx","components/Users/UsersSearchForm.tsx","components/Users/Users.tsx","components/Users/UsersContainer.tsx","App.tsx","index.tsx","components/common/FormsControls/FormsControls.tsx","components/common/Preloader/Preloader.tsx","components/common/FormsControls/FormControls.module.css","utils/validators/validators.ts"],"names":["module","exports","profileAPI","userId","instance","get","then","res","data","status","put","photoFile","formData","FormData","append","headers","profile","initialState","posts","id","message","likesCount","newPostText","actions","addPostActionCreator","type","setUserProfile","setStatus","deletePost","postId","savePhotoSuccess","photos","getUserProfile","dispatch","a","getStatus","updateStatus","resultCode","savePhoto","file","saveProfile","getState","Auth","Error","stopSubmit","_error","messages","Promise","reject","profileReducer","state","action","newPost","filter","p","dialogs","name","sendMessage","newMessage","postMessage","dialogsReducer","Date","getTime","ResultCodesEnum","ResultCodeForCaptchaEnum","axios","create","withCredentials","baseURL","Boolean","window","location","hostname","match","authApi","email","password","rememberMe","captcha","post","securityAPI","login","isAuth","captchaUrl","payload","getAuthUserData","Success","getCaptchaUrl","url","authReducer","initialized","appReducer","updateObjectInArray","items","itemId","objPropName","newObjProps","map","u","usersApi","getUsers","currentPage","pageSize","term","friend","delete","response","users","totalUsersCount","isFetching","followingInProgress","count","requestUsers","page","totalCount","usersReducer","followed","rootReducers","combineReducers","ProfilePage","DialogsPage","UsersPage","App","form","formReducer","composeEnhancers","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","store","createStore","applyMiddleware","thunkMiddleware","withSuspense","WrappedComponent","props","Suspense","fallback","Preloader","LoginReduxForm","reduxForm","handleSubmit","error","onSubmit","createField","required","Input","undefined","src","className","style","formSummaryError","LoginPage","useSelector","useDispatch","to","mes","length","getPageSize","createSelector","getTotalUsersCount","getCurrentPage","getIsFetching","getFollowingInProgress","getUsersFilter","Paginator","totalItemsCount","onPageChanged","x","portionSize","pagesCount","Math","ceil","pages","i","push","portionCount","useState","portionNumber","setPortionNumber","leftPortionPageNumber","rightPortionPageNumber","cn","styles","paginator","onClick","selectedPage","pageNumber","key","e","User","user","unfollow","follow","small","userPhoto","disabled","some","usersSearchFormValidate","values","UsersSearchForm","React","memo","enableReinitialize","initialValues","String","validate","setSubmitting","onFilterChanged","isSubmitting","as","value","Users","history","useHistory","useEffect","query","pathname","search","queryString","parsed","substr","actualFilter","Number","pageTitle","SubMenu","Menu","Header","Layout","Content","Sider","DialogsContainer","lazy","ProfileContainer","SuspendedDialogs","SuspendedProfile","catchAllUnhandledErrors","alert","this","initializeApp","addEventListener","removeEventListener","width","mode","defaultSelectedKeys","defaultOpenKeys","height","borderRight","icon","UserOutlined","title","Item","LaptopOutlined","NotificationOutlined","padding","margin","exact","path","render","Component","AppContainer","withRouter","connect","promise","all","SamuraiJSApp","ReactDOM","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","console","FormControl","meta","touched","children","hasError","s","formControl","Textarea","input","restProps","placeholder","validators","component","text","preloader","alt","maxLengthCreator","maxLength"],"mappings":"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","file":"static/js/main.d106de1a.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"paginator\":\"Paginator_paginator__3xTgA\",\"activePage\":\"Paginator_activePage__3aE6G\"};","import {ProfileType} from \"../Types/Types\";\nimport {APIResponseType, instance, SavePhotoResponseDataType} from \"./api\";\n\nexport const profileAPI = {\n  getProfile(userId: number) {\n    return instance.get<ProfileType>(`profile/` + userId).then(res => res.data)\n  },\n  getStatus(userId: number) {\n    return instance.get<string>(`profile/status/` + userId).then(res => res.data)\n  },\n  updateStatus(status: string) {\n    return instance.put<APIResponseType>(`profile/status`, {status: status})\n      .then(res => res.data);\n  },\n  savePhoto(photoFile: File) {\n    const formData = new FormData();\n    formData.append(\"image\", photoFile);\n\n    return instance.put<APIResponseType<SavePhotoResponseDataType>>(`profile/photo`, formData, {\n      headers: {\n        'Content-Type': 'multipart/form-data'\n      }\n    }).then(res => res.data);\n  },\n  saveProfile(profile: ProfileType) {\n    return instance.put<APIResponseType>(`profile`, profile).then(res => res.data);\n  }\n}","import {FormAction, stopSubmit} from \"redux-form\"\nimport {PhotoType, PostType, ProfileType} from \"../Types/Types\"\nimport {BaseThunkType, InferActionsTypes} from \"./redux-store\"\nimport {profileAPI} from \"../api/profile-api\"\n\nlet initialState = {\n  posts: [\n      {id: 1, message: 'Hi, how are you?', likesCount: 12},\n      {id: 2, message: 'It\\'s my first post', likesCount: 11},\n      {id: 3, message: 'Blabla', likesCount: 11},\n      {id: 4, message: 'Dada', likesCount: 11}\n  ] as Array<PostType>,\n  profile: null as ProfileType | null,\n  status: \"\",\n  newPostText: ''\n}\n\nconst profileReducer = (state = initialState, action: ActionsTypes): InitialStateType => {\n\n    switch (action.type) {\n        case 'SN/PROFILE/ADD_POST': {\n            let newPost = {\n                id: 5,\n                message: action.newPostText,\n                likesCount: 0\n            };\n            return {\n                ...state,\n                posts: [...state.posts, newPost],\n                newPostText: ''\n            };\n        }\n        case 'SN/PROFILE/SET_STATUS': {\n            return {\n                ...state,\n                status: action.status\n            }\n        }\n        case 'SN/PROFILE/SET_USER_PROFILE': {\n            return {...state, profile: action.profile}\n        }\n\n        case 'SN/PROFILE/DELETE_POST':\n            return {...state, posts: state.posts.filter(p => p.id != action.postId)}\n\n        case 'SN/PROFILE/SAVE_PHOTO_SUCCESS':\n            debugger;\n            return {...state, profile: {...state.profile, photos: action.photos }as ProfileType}\n        default:\n            return state;\n    }\n}\n\n//Action\nexport const actions = {\n  addPostActionCreator: (newPostText: string) => ({type: 'SN/PROFILE/ADD_POST', newPostText}as const),\n  setUserProfile: (profile: ProfileType) => ({type: 'SN/PROFILE/SET_USER_PROFILE', profile}as const),\n  setStatus: (status: string) => ({type: 'SN/PROFILE/SET_STATUS', status}as const),\n  deletePost: (postId: number) => ({type: 'SN/PROFILE/DELETE_POST', postId}as const),\n  savePhotoSuccess: (photos: PhotoType) => ({type: 'SN/PROFILE/SAVE_PHOTO_SUCCESS', photos}as const)\n}\n\n//Thunk\nexport const getUserProfile = (userId: number): ThunkType => async (dispatch) => {\n    const data = await profileAPI.getProfile(userId);\n    dispatch(actions.setUserProfile(data));\n}\n\nexport const getStatus = (userId: number): ThunkType => async (dispatch) => {\n    let data = await profileAPI.getStatus(userId);\n    dispatch(actions.setStatus(data));\n}\n\nexport const updateStatus = (status: string): ThunkType => async (dispatch) => {\n    let data = await profileAPI.updateStatus(status);\n\n    if (data.resultCode === 0) {\n        dispatch(actions.setStatus(status));\n    }\n}\nexport const savePhoto = (file: File): ThunkType => async (dispatch) => {\n    let data = await profileAPI.savePhoto(file);\n\n    if (data.resultCode === 0) {\n        dispatch(actions.savePhotoSuccess(data.data.photos));\n    }\n}\nexport const saveProfile = (profile: ProfileType): ThunkType => async (dispatch,\n                                                                       getState) => {\n    const userId = getState().Auth.userId;\n    const data = await profileAPI.saveProfile(profile);\n\n    if (data.resultCode === 0) {\n      if (userId != null) {\n        dispatch(getUserProfile(userId))\n      } else {\n        throw new Error(\"userId can't be null\")\n      }\n    } else {\n      dispatch(stopSubmit(\"edit-profile\", {_error: data.messages[0] }))\n      return Promise.reject(data.messages[0])\n    }\n}\n\nexport default profileReducer;\n\n//type\nexport type InitialStateType = typeof initialState\ntype ActionsTypes = InferActionsTypes<typeof actions>\ntype ThunkType = BaseThunkType<ActionsTypes | FormAction>\n","import {InferActionsTypes} from \"./redux-store\"\n\nconst initialState = {\n  dialogs: [\n    {id: 1, name: 'Dimon'},\n    {id: 2, name: 'Andrew'},\n    {id: 3, name: 'Sveta'},\n    {id: 4, name: 'Sasha'},\n    {id: 5, name: 'Viktor'},\n    {id: 6, name: 'Valera'}\n  ],\n  messages: [\n    {id: 1, message: 'Nihay'},\n    {id: 2, message: 'What is you name?'},\n    {id: 3, message: 'when?'},\n    {id: 4, message: 'Whot?'},\n    {id: 5, message: 'Ho?'}\n  ]\n}\n//actions\nexport const actions = {\n  sendMessage: (newMessage: string) => ({type: 'SN/DIALOGS/SEND-MESSAGE', postMessage: newMessage}as const)\n}\n\nconst dialogsReducer = (state = initialState , action: ActionsTypes): InitialStateType  => {\n  switch (action.type) {\n    case \"SN/DIALOGS/SEND-MESSAGE\":\n      const newMessage = {\n        'id': new Date().getTime(),\n        'message': action.postMessage\n      }\n      return {\n        ...state,\n        messages: [...state.messages, newMessage]\n      }\n    default:\n      return state;\n  }\n}\n\nexport default dialogsReducer\n\n//type\nexport type InitialStateType = typeof initialState\nexport type ActionsTypes = InferActionsTypes<typeof actions>","// extracted by mini-css-extract-plugin\nmodule.exports = {\"preloader\":\"preloader_preloader__3xXJS\"};","module.exports = __webpack_public_path__ + \"static/media/preloader.90c60c15.gif\";","module.exports = __webpack_public_path__ + \"static/media/userPhotoDef.b2347797.png\";","import axios from \"axios\";\nimport {PhotoType, UserType} from \"../Types/Types\";\n\nexport const instance = axios.create({\n  withCredentials: true,\n  baseURL: 'https://social-network.samuraijs.com/api/1.0/',\n  headers: {\n    'API-KEY': '3edab39c-8b84-4e3b-a130-42dfb20faf00'\n  }\n})\nexport enum ResultCodesEnum {\n  Success = 0,\n  Error = 1\n}\nexport enum ResultCodeForCaptchaEnum {\n  CaptchaIsRequired = 10\n}\nexport type GetItemsType = {\n  items: Array<UserType>\n  totalCount: number\n  error: string | null\n}\nexport type APIResponseType<D = {}, RC = ResultCodesEnum> = {\n  data: D\n  messages: Array<string>\n  resultCode: RC\n}\nexport type SavePhotoResponseDataType = {\n  photos: PhotoType\n}","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import {APIResponseType, instance, ResultCodeForCaptchaEnum, ResultCodesEnum} from \"./api\";\n\ntype MeResponseDataType = {\n  id: number\n  email: string\n  login: string\n}\n\ntype LoginResponseDataType = {\n  userId: number\n}\n\nexport const authApi = {\n  me() {\n    return instance.get<APIResponseType<MeResponseDataType>>(`auth/me`)\n      .then(res => res.data)\n  },\n  login(email: string, password: string, rememberMe: boolean = false, captcha: string) {\n    return instance.post<APIResponseType<LoginResponseDataType, ResultCodesEnum | ResultCodeForCaptchaEnum>>(`auth/login`,\n      {email, password, rememberMe, captcha})\n      .then(res => res.data)\n  },\n  logout() {\n    return instance.delete(`auth/login`)\n      .then(res => res.data)\n  }\n}","import { instance } from \"./api\";\n\ntype GetCaptchaUrlResponseType = {\n  url: string\n}\n\nexport const securityAPI = {\n  getCaptchaUrl() {\n    return instance.get<GetCaptchaUrlResponseType>(`security/get-captcha-url`)\n      .then(res => res.data)\n  }\n}","import {BaseThunkType, InferActionsTypes} from \"./redux-store\"\nimport {ResultCodeForCaptchaEnum, ResultCodesEnum} from '../api/api'\nimport {FormAction, stopSubmit} from \"redux-form\"\nimport {authApi} from \"../api/auth-api\";\nimport {securityAPI} from \"../api/security-api\";\n\nconst initialState = {\n  userId: null as (number | null),\n  email: null as string | null,\n  login: null as string | null,\n  isAuth: false,\n  captchaUrl: null as string | null\n}\n\nconst authReducer = (state = initialState, action: ActionsType): InitialStateType => {\n  switch (action.type) {\n    case 'SN/auth/SET_USER_DATA':\n\n    case 'SN/auth/GET_CAPTCHA_URL_SUCCESS':\n      return {\n        ...state,\n        ...action.payload\n      }\n    default:\n      return state;\n  }\n};\n//actions\nexport const actions = {\n  setAuthUserData: (userId: number | null, email: string | null, login: string | null, isAuth: boolean) => ({\n    type: 'SN/auth/SET_USER_DATA', payload: {userId, email, login, isAuth}} as const),\n  getCaptchaUrlSuccess: (captchaUrl: string) => ({\n    type: 'SN/auth/GET_CAPTCHA_URL_SUCCESS', payload: {captchaUrl}} as const)\n}\n\n//Thunk\nexport const getAuthUserData = (): ThunkType => async (\n  dispatch) => {\n  let data = await authApi.me ()\n      if ( data.resultCode === ResultCodesEnum.Success) {\n        let { id, login, email } = data.data\n        dispatch (actions.setAuthUserData( id, email, login, true ))\n      }\n}\n\nexport const login = ( email: string, password: string, rememberMe: boolean, captcha: string):ThunkType => async (\n  dispatch) => {\n    let data = await authApi.login (email, password, rememberMe, captcha)\n        if ( data.resultCode === ResultCodesEnum.Success) {\n          dispatch(getAuthUserData())\n        }  else {\n          if ( data.resultCode === 10 ) {\n            dispatch(getCaptchaUrl())\n          }\n          let mes = data.messages.length > 0 ? data.messages[0] : 'Some error'\n          dispatch(stopSubmit('login', {_error: mes}))\n        }\n}\n\nexport const getCaptchaUrl = (): ThunkType => async (dispatch) => {\n  const data = await securityAPI.getCaptchaUrl()\n  const captchaUrl = data.url\n  dispatch(actions.getCaptchaUrlSuccess(captchaUrl))\n}\n\nexport const logout = ():ThunkType => async (dispatch) => {\n    let data = await authApi.logout()\n        if ( data.resultCode === ResultCodesEnum.Success) {\n          dispatch(actions.setAuthUserData(null, null, null, false))\n        }\n}\n\nexport default authReducer\n\n//type\nexport type InitialStateType = typeof initialState\ntype ActionsType = InferActionsTypes<typeof actions>\ntype ThunkType = BaseThunkType<ActionsType | FormAction>","import { BaseThunkType, InferActionsTypes} from \"./redux-store\"\nimport {getAuthUserData} from \"./auth-reducer\"\n\nconst initialState = {\n  initialized: false\n}\n\nexport const actions = {\n  initializedSuccess: () => ({type: 'SET_INITIALIZED'}as const)\n}\n\nconst appReducer = (state = initialState, action: ActionsTypes): initialStateType => {\n  switch (action.type) {\n    case 'SET_INITIALIZED':\n      return {\n        ...state,\n        initialized: true\n      }\n    default:\n      return state;\n  }\n}\n\n//Thunk\nexport const initializeApp = (): ThunkType => async (dispatch) => {\n    let promise = await dispatch(getAuthUserData())\n    Promise.all([promise])\n        .then( () => {\n            dispatch(actions.initializedSuccess())\n        })\n}\n\nexport default appReducer\n\n//type\ntype initialStateType = typeof initialState\ntype ActionsTypes = InferActionsTypes<typeof actions>\ntype ThunkType = BaseThunkType<ActionsTypes>","export const updateObjectInArray = (items: any, itemId: any, objPropName: any, newObjProps: any) => {\n  return items.map( (u: any) => {\n    if (u[objPropName] === itemId) {\n      return {...u, ...newObjProps}\n    }\n    return u;\n  })\n}","import {instance, GetItemsType, APIResponseType} from \"./api\"\n\nexport const usersApi = {\n  getUsers(currentPage: number = 1, pageSize: number = 5, term: string = '', friend: null | boolean = null) {\n    return instance.get<GetItemsType>(`users?page=${currentPage}&count=${pageSize}&term=${term}` + (friend === null ? '' : `&friend=${friend}`) )\n      .then(res => res.data)\n  },\n  delete(id: number) {\n    return instance.delete(`follow/${id}`)\n      .then(response => {\n        return response.data\n      })\n  },\n  post(id: number) {\n    return instance.post<APIResponseType>(`follow/${id}`, {})\n      .then(response => {\n        return response.data\n      })\n  }\n  // getProfile(userId: number) {\n  //   return profileAPI.getProfile(userId)\n  // }\n}","import {updateObjectInArray} from '../utils/object-helper'\nimport {UserType} from '../Types/Types'\nimport {BaseThunkType, InferActionsTypes} from './redux-store'\nimport {Dispatch} from 'redux'\nimport {usersApi} from '../api/users-api'\nimport {APIResponseType} from '../api/api'\n\nlet initialState = {\n  users: [] as Array<UserType>,\n  pageSize: 10,\n  totalUsersCount: 0,\n  currentPage: 1,\n  isFetching: true,\n  followingInProgress: [] as Array<number>, //array of users ids,\n  filter: {\n    term: '',\n    friend: null as null | boolean\n  }\n}\n\nconst usersReducer = (state = initialState, action: ActionsTypes): InitialState => {\n  switch (action.type) {\n    case 'SN/USERS/FOLLOW':\n      return {\n        ...state,\n        users: updateObjectInArray(state.users, action.userId, 'id', {followed: true})\n      }\n    case 'SN/USERS/UNFOLLOW':\n      return {\n        ...state,\n        users: updateObjectInArray(state.users, action.userId, 'id', {followed: false})\n      }\n    case 'SN/USERS/SET_USERS':\n      return {...state, users: action.users}\n\n    case 'SN/USERS/SET_CURRENT_PAGE':\n      return {...state, currentPage: action.currentPage}\n\n    case 'SN/USERS/SET_TOTAL_USERS_COUNT':\n      return {...state, totalUsersCount: action.count}\n\n    case 'SN/USERS/TOGGLE_IS_FETCHING':\n      return {...state, isFetching: action.isFetching}\n\n    case 'SN/USERS/SET_FILTER':\n      return {...state, filter: action.payload}\n\n    case 'SN/USERS/TOGGLE_IS_FOLLOWING_PROGRESS':\n      return {\n        ...state,\n        followingInProgress: action.isFetching\n          ? [...state.followingInProgress, action.userId]\n          : state.followingInProgress.filter(id => id != action.userId)\n    }\n    default:\n      return state\n  }\n}\n\nexport const actions = {\n  followSuccess: (userId: number) => ({type: 'SN/USERS/FOLLOW', userId} as const),\n  unfollowSuccess: (userId: number) => ({type: 'SN/USERS/UNFOLLOW', userId} as const),\n  setUsers: (users: Array<UserType>) => ({type: 'SN/USERS/SET_USERS', users} as const),\n  setCurrentPage: (currentPage: number) => ({type: 'SN/USERS/SET_CURRENT_PAGE', currentPage} as const),\n  setFilter: (filter: FilterType) => ({type: 'SN/USERS/SET_FILTER', payload: filter} as const),\n  setTotalUsersCount: (totalUsersCount: number) => ({\n    type: 'SN/USERS/SET_TOTAL_USERS_COUNT',\n    count: totalUsersCount\n  } as const),\n  toggleIsFetching: (isFetching: boolean) => ({\n    type: 'SN/USERS/TOGGLE_IS_FETCHING',\n    isFetching\n  } as const),\n  toggleFollowingProgress: (isFetching: boolean, userId: number) => ({\n    type: 'SN/USERS/TOGGLE_IS_FOLLOWING_PROGRESS',\n    isFetching,\n    userId\n  } as const)\n}\n\nexport const requestUsers = (page: number,\n                             pageSize: number,\n                             filter: FilterType): ThunkType => {\n  return async (dispatch, getState) => {\n    dispatch(actions.toggleIsFetching(true))\n    dispatch(actions.setCurrentPage(page))\n    dispatch(actions.setFilter(filter))\n\n    let data = await usersApi.getUsers(page, pageSize, filter.term, filter.friend)\n    dispatch(actions.toggleIsFetching(false))\n    dispatch(actions.setUsers(data.items))\n    dispatch(actions.setTotalUsersCount(data.totalCount))\n  }\n}\n\nconst _followUnfollowFlow = async (dispatch: Dispatch<ActionsTypes>,\n                                   userId: number,\n                                   apiMethod: (userId: number) => Promise<APIResponseType>,\n                                   actionCreator: (userId: number) => ActionsTypes) => {\n  dispatch(actions.toggleFollowingProgress(true, userId))\n  let response = await apiMethod(userId)\n\n  if (response.resultCode == 0) {\n    dispatch(actionCreator(userId))\n  }\n  dispatch(actions.toggleFollowingProgress(false, userId))\n}\n\nexport const follow = (userId: number): ThunkType => {\n  return async (dispatch) => {\n    await _followUnfollowFlow(dispatch, userId, usersApi.post.bind(usersApi), actions.followSuccess)\n  }\n}\n\nexport const unfollow = (userId: number): ThunkType => {\n  return async (dispatch) => {\n    await _followUnfollowFlow(dispatch, userId, usersApi.delete.bind(usersApi), actions.unfollowSuccess)\n  }\n}\n\nexport default usersReducer;\n\nexport type InitialState = typeof initialState\nexport type FilterType = typeof initialState.filter\ntype ActionsTypes = InferActionsTypes<typeof actions>\ntype ThunkType = BaseThunkType<ActionsTypes>","import {Action, applyMiddleware, combineReducers, compose, createStore, Store} from 'redux'\nimport profileReducer from \"./profile-reducer\"\nimport dialogsReducer from \"./dialogs-reducer\"\nimport usersReducer from './users-reducer'\nimport authReducer from \"./auth-reducer\"\nimport thunkMiddleware, {ThunkAction} from 'redux-thunk'\nimport { reducer as formReducer } from 'redux-form'\nimport appReducer from \"./app-reducer\";\n\nlet rootReducers = combineReducers({\n  ProfilePage: profileReducer,\n  DialogsPage: dialogsReducer,\n  UsersPage: usersReducer,\n  Auth: authReducer,\n  App: appReducer,\n  form: formReducer\n});\n\n// type RootReducerType = typeof rootReducers; // (globalstate: AppStateType) => AppStateType\nexport type AllAppTypes = ReturnType<typeof rootReducers>\n\nexport type InferActionsTypes<T> = T extends { [keys: string]: (...args: any[]) => infer U } ? U : never\n\nexport type BaseThunkType<A extends Action = Action, R = Promise<void>> = ThunkAction<R, AllAppTypes, unknown, A>\n\n//@ts-ignore\nconst composeEnhancers = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose;\nconst store = createStore(rootReducers, composeEnhancers( applyMiddleware(thunkMiddleware)));\n\nexport default store;","import React from \"react\"\nimport {Preloader} from \"../components/common/Preloader/Preloader\";\n\nexport function withSuspense<WCP>(WrappedComponent: React.ComponentType<WCP>) {\n  return (props: WCP) => {\n    return <React.Suspense fallback={<Preloader/>} >\n      <WrappedComponent {...props} />\n    </React.Suspense>\n  }\n}","import React from 'react'\nimport {InjectedFormProps, reduxForm} from 'redux-form'\nimport {createField, GetStringKeys, Input} from '../common/FormsControls/FormsControls'\nimport {required} from '../../utils/validators/validators'\nimport {useDispatch, useSelector} from 'react-redux'\nimport {login} from '../../redux/auth-reducer'\nimport {Redirect} from 'react-router-dom'\nimport style from './../common/FormsControls/FormControls.module.css'\nimport {AllAppTypes} from '../../redux/redux-store'\n\ntype LoginFormOwnProps = {\n  captchaUrl: string | null\n}\n\nconst LoginForm: React.FC<InjectedFormProps<LoginFormValuesType, LoginFormOwnProps> & LoginFormOwnProps>\n  = ({handleSubmit, error, captchaUrl}) => {\n  return (\n    <form onSubmit={handleSubmit}>\n      {createField<LoginFormValuesTypeKeys>('Email', 'email', [required], Input)}\n      {createField<LoginFormValuesTypeKeys>('Password', 'password', [required], Input, {type: 'password'})}\n      {createField<LoginFormValuesTypeKeys>(undefined, 'rememberMe', [], Input, {type: 'checkbox'}, 'remember me')}\n\n      {captchaUrl && <img src={captchaUrl}/>}\n      {captchaUrl && createField<LoginFormValuesTypeKeys>('Symbols from image', 'captcha', [required], Input, {})}\n\n\n      {error && <div className={style.formSummaryError}>\n        {error}\n      </div>\n      }\n      <div>\n        <button>Login</button>\n      </div>\n    </form>\n  )\n}\n\nconst LoginReduxForm = reduxForm<LoginFormValuesType, LoginFormOwnProps>({form: 'login'})(LoginForm)\n\nexport type LoginFormValuesType = {\n  captcha: string\n  rememberMe: boolean\n  password: string\n  email: string\n}\ntype LoginFormValuesTypeKeys = GetStringKeys<LoginFormValuesType>\n\nexport const LoginPage: React.FC = () => {\n  const captchaUrl = useSelector((state: AllAppTypes) => state.Auth.captchaUrl)\n  const isAuth = useSelector((state: AllAppTypes) => state.Auth.isAuth)\n  const dispatch = useDispatch()\n\n  const onSubmit = (formData: LoginFormValuesType) => {\n    dispatch(login(formData.email, formData.password, formData.rememberMe, formData.captcha))\n  }\n\n  if (isAuth) {\n    return <Redirect to={'/profile'}/>\n  }\n\n  return <div>\n    <h1>Login</h1>\n    <LoginReduxForm onSubmit={onSubmit} captchaUrl={captchaUrl}/>\n  </div>\n}","import {AllAppTypes} from \"./redux-store\"\nimport {createSelector} from 'reselect'\n\nexport const getUsers = (state: AllAppTypes)  => {\n    return state.UsersPage.users\n}\n\nexport const getUserSuper = createSelector( getUsers, (users) => {\n    return users.filter(u => true)\n})\n\nexport const getPageSize = (state: AllAppTypes)  => {\n    return state.UsersPage.pageSize\n}\n\nexport const getTotalUsersCount = (state: AllAppTypes)  => {\n    return state.UsersPage.totalUsersCount\n}\n\nexport const getCurrentPage = (state: AllAppTypes)  => {\n    return state.UsersPage.currentPage\n}\n\nexport const getIsFetching = (state: AllAppTypes)  => {\n    return state.UsersPage.isFetching\n}\n\nexport const getFollowingInProgress = (state: AllAppTypes)  => {\n    return state.UsersPage.followingInProgress\n}\n\nexport const getUsersFilter = (state: AllAppTypes) => {\n  return state.UsersPage.filter\n}","import React, {useState} from 'react'\nimport styles from './Paginator.module.sass'\nimport cn from 'classnames'\n\ntype PropsType = {\n  totalItemsCount: number\n  pageSize: number\n  currentPage?: number\n  portionSize?: number\n  onPageChanged?: (pageNumber: number) => void\n}\n\nlet Paginator: React.FC<PropsType> = ({ totalItemsCount,\n                                        pageSize,\n                                        currentPage = 1,\n                                        onPageChanged = x => x,\n                                        portionSize = 5}) => {\n\n  let pagesCount = Math.ceil(totalItemsCount / pageSize)\n\n  let pages: Array<number> = []\n\n  for (let i = 1; i <= pagesCount; i++) {\n    pages.push(i);\n  }\n\n  let portionCount = Math.ceil(pagesCount / portionSize);\n  let [portionNumber, setPortionNumber] = useState(1);\n\n  let leftPortionPageNumber = (portionNumber - 1) * portionSize + 1;\n  let rightPortionPageNumber = portionNumber * portionSize;\n\n\n  return <div className={cn(styles.paginator)}>\n    { portionNumber > 1 &&\n    <button onClick={() => { setPortionNumber(portionNumber - 1) }}>prev</button> }\n\n    {pages\n      .filter(p => p >= leftPortionPageNumber && p<=rightPortionPageNumber)\n      .map((p) => {\n        return <span className={ cn({\n          [styles.selectedPage]: currentPage === p\n        }, styles.pageNumber) }\n                     key={p}\n                     onClick={(e) => {\n                       onPageChanged(p);\n                     }}>{p}</span>\n      })}\n    { portionCount > portionNumber &&\n    <button onClick={() => { setPortionNumber(portionNumber + 1) }}>next</button> }\n\n  </div>\n}\n\nexport default Paginator","import React from 'react'\nimport styles from './User.module.sass'\nimport userPhoto from '../../img/userPhotoDef.png'\nimport {NavLink} from 'react-router-dom'\nimport {UserType} from '../../Types/Types'\n\ntype PropsType = {\n  user: UserType\n  followingInProgress: Array<number>\n  unfollow: (userId: number) => void\n  follow: (userId: number) => void\n}\n\nconst User: React.FC<PropsType> = ({user, followingInProgress, unfollow, follow}) => {\n  return (\n    <div>\n                <span>\n                    <div>\n                       <NavLink to={'/profile/' + user.id}>\n                        <img src={user.photos.small != null ? user.photos.small : userPhoto}\n                             className={styles.userPhoto}/>\n                       </NavLink>\n                    </div>\n                    <div>\n                        {user.followed\n                          ? <button disabled={followingInProgress\n                            .some(id => id === user.id)}\n                                    onClick={() => {\n                                      unfollow(user.id)\n                                    }}>\n                            Unfollow</button>\n                          : <button disabled={followingInProgress.some(id => id === user.id)}\n                                    onClick={() => {\n                                      follow(user.id)\n                                    }}>\n                            Follow</button>}\n\n                    </div>\n                </span>\n      <span>\n                    <span>\n                        <div>{user.name}</div>\n                        <div>{user.status}</div>\n                    </span>\n                    <span>\n                        <div>{'user.location.country'}</div>\n                        <div>{'user.location.city'}</div>\n                    </span>\n                </span>\n    </div>)\n}\n\nexport default User","import {Field, Form, Formik} from 'formik'\nimport React from 'react'\nimport {FilterType} from '../../redux/users-reducer'\nimport {useSelector} from \"react-redux\";\nimport {getUsersFilter} from \"../../redux/users-selectors\";\n\ntype FriendFormType = 'true' | 'false' | 'null'\ntype FormType = {\n  term: string\n  friend: FriendFormType\n}\n\ntype PropsType = {\n  onFilterChanged: (filter: FilterType) => void\n}\n\nconst usersSearchFormValidate = (values: any) => {\n  const errors = {}\n  return errors\n}\n\nexport const UsersSearchForm: React.FC<PropsType> = React.memo((props) => {\n\n  const filter = useSelector(getUsersFilter)\n\n  const submit = (values: FormType, {setSubmitting}: { setSubmitting: (isSubmitting: boolean) => void }) => {\n    const filter: FilterType = {\n      term: values.term,\n      friend: values.friend === 'null' ? null : values.friend === 'true' ? true : false\n    }\n\n    props.onFilterChanged(filter)\n    setSubmitting(false)\n  }\n\n  return <div>\n    <Formik\n      enableReinitialize={true}\n      initialValues={{term: filter.term, friend: String(filter.friend) as FriendFormType}}\n      validate={usersSearchFormValidate}\n      onSubmit={submit}\n    >\n      {({isSubmitting}) => (\n        <Form>\n          <Field type=\"text\" name=\"term\"/>\n\n          <Field name=\"friend\" as=\"select\">\n            <option value=\"null\">All</option>\n            <option value=\"true\">Only friends</option>\n            <option value=\"false\">Only no friends</option>\n          </Field>\n          <button type=\"submit\" disabled={isSubmitting}>\n            Find\n          </button>\n        </Form>\n      )}\n    </Formik>\n  </div>\n})","import React, {FC, useEffect } from 'react'\nimport Paginator from '../common/Paginator/Paginator'\nimport User from './User'\nimport {UsersSearchForm} from './UsersSearchForm'\nimport {FilterType, requestUsers} from '../../redux/users-reducer'\nimport {useDispatch, useSelector} from 'react-redux'\nimport {\n  getCurrentPage,\n  getFollowingInProgress,\n  getPageSize,\n  getTotalUsersCount,\n  getUsers,\n  getUsersFilter\n} from '../../redux/users-selectors'\nimport { useHistory } from 'react-router-dom'\nimport * as queryString from \"querystring\";\n\ntype PropsType = {}\ntype QueryParamsType = {\n  term?: string\n  page?: string\n  friend?: string\n}\n\nexport const Users: FC<PropsType> = (props) => {\n\n  const users = useSelector(getUsers)\n  const totalUsersCount = useSelector(getTotalUsersCount)\n  const currentPage = useSelector(getCurrentPage)\n  const pageSize = useSelector(getPageSize)\n  const filter = useSelector(getUsersFilter)\n  const followingInProgress = useSelector(getFollowingInProgress)\n\n  const dispatch = useDispatch()\n  const history = useHistory()\n\n  useEffect(() => {\n    const query: QueryParamsType = {}\n\n    if (!!filter.term) query.term = filter.term\n    if (filter.friend !== null) query.friend = String(filter.friend)\n    if (currentPage !== 1) query.page = String(currentPage)\n\n    history.push({\n      pathname: '/users',\n      search: queryString.stringify(query)\n    })\n  }, [filter,currentPage])\n\n  useEffect(() => {\n    const parsed = queryString.parse(history.location.search.substr(1)) as QueryParamsType\n    let actualPage = currentPage\n    let actualFilter = filter\n\n    if (!!parsed.page) actualPage = Number(parsed.page)\n\n    if (!!parsed.term) actualFilter = {...actualFilter, term: parsed.term as string}\n\n    switch(parsed.friend) {\n      case \"null\":\n        actualFilter = {...actualFilter, friend: null}\n        break;\n      case \"true\":\n        actualFilter = {...actualFilter, friend: true}\n        break;\n      case \"false\":\n        actualFilter = {...actualFilter, friend: false}\n        break;\n    }\n\n    dispatch(requestUsers(currentPage, pageSize, filter))\n  }, [])\n\n  const onPageChanged = (pageNumber: number) => {\n    dispatch(requestUsers(pageNumber, pageSize, filter))\n  }\n  const onFilterChanged = (filter: FilterType) => {\n    dispatch(requestUsers(1, pageSize, filter))\n  }\n  const follow = (userId: number) => {\n    dispatch(follow(userId));\n  }\n  const unfollow = (userId: number) => {\n    dispatch(unfollow(userId));\n  }\n\n  return <div>\n\n    <UsersSearchForm onFilterChanged={onFilterChanged}/>\n\n    <Paginator currentPage={currentPage} onPageChanged={onPageChanged}\n               totalItemsCount={totalUsersCount} pageSize={pageSize}/>\n    <div>\n      {\n        users.map(u => <User user={u}\n                             followingInProgress={followingInProgress}\n                             key={u.id}\n                             unfollow={unfollow}\n                             follow={follow} />\n        )\n      }\n    </div>\n  </div>\n}","import React from 'react'\nimport {useSelector} from 'react-redux'\nimport {Preloader} from '../common/Preloader/Preloader'\nimport {getIsFetching} from '../../redux/users-selectors'\nimport {Users} from './Users'\n\ntype UsersPagePropsType = {\n  pageTitle: string\n}\n\nexport const UsersPage: React.FC<UsersPagePropsType> = (props) => {\n  const isFetching = useSelector(getIsFetching)\n  return <>\n    <h2>{props.pageTitle}</h2>\n    {isFetching ? <Preloader/> : null}\n    <Users />\n  </>\n}","import React, {Component} from 'react'\nimport './App.css'\nimport 'antd/dist/antd.css'\nimport {BrowserRouter, Route, withRouter, Switch, Redirect, Link} from 'react-router-dom'\nimport { initializeApp } from './redux/app-reducer'\nimport {connect, Provider} from \"react-redux\"\nimport {compose} from \"redux\"\nimport store, {AllAppTypes} from \"./redux/redux-store\"\nimport {Preloader} from \"./components/common/Preloader/Preloader\"\nimport {withSuspense} from \"./hoc/withSuspense\"\nimport {LoginPage} from \"./components/Login/LoginPage\"\nimport {UsersPage} from \"./components/Users/UsersContainer\"\n\nimport {Breadcrumb, Layout, Menu} from 'antd'\nimport {LaptopOutlined, NotificationOutlined, UserOutlined} from '@ant-design/icons'\n\nconst { SubMenu } = Menu\nconst { Header, Content, Sider } = Layout\n\nconst DialogsContainer = React.lazy(() => import('./components/Dialogs/DialogsContainer'))\nconst ProfileContainer = React.lazy(() => import('./components/Profile/ProfileContainer'))\n\nconst SuspendedDialogs = withSuspense(DialogsContainer)\nconst SuspendedProfile = withSuspense(ProfileContainer)\n\ntype MapPropsType = ReturnType<typeof mapStateToProps>\ntype DispatchPropsType = { initializedApp: () => void }\n\n\nclass App extends Component<MapPropsType & DispatchPropsType> {\n  catchAllUnhandledErrors = (e: PromiseRejectionEvent) => {\n    alert ('Some error occured')\n  }\n  componentDidMount() {\n    //@ts-ignore\n    this.props.initializeApp()\n    window.addEventListener('unhandledrejection', this.catchAllUnhandledErrors)\n  }\n  componentWillMount() {\n    window.removeEventListener('unhandledrejection', this.catchAllUnhandledErrors)\n  }\n\n\trender () {\n    if(!this.props.initialized) {return <Preloader/>}\n\n    return (\n      <Layout>\n        <Header/>\n        <Layout>\n          <Sider width={200} className=\"site-layout-background\">\n            <Menu\n                  mode=\"inline\"\n                  defaultSelectedKeys={['1']}\n                  defaultOpenKeys={['sub1']}\n                  style={{ height: '100%', borderRight: 0 }}\n            >\n              <SubMenu key=\"sub1\" icon={<UserOutlined/>} title=\"My profile\">\n                <Menu.Item key=\"1\"><Link to='/profile'>Profile</Link></Menu.Item>\n                <Menu.Item key=\"2\"><Link to='/dialogs'>Dialogs</Link></Menu.Item>\n                {/*<Menu.Item key=\"3\">option3</Menu.Item>*/}\n                {/*<Menu.Item key=\"4\">option4</Menu.Item>*/}\n              </SubMenu>\n              <SubMenu key=\"sub2\" icon={<LaptopOutlined/>} title=\"Developers\">\n                <Menu.Item key=\"5\"><Link to = '/users'>Developers</Link></Menu.Item>\n                {/*<Menu.Item key=\"6\">option6</Menu.Item>*/}\n                {/*<Menu.Item key=\"7\">option7</Menu.Item>*/}\n                {/*<Menu.Item key=\"8\">option8</Menu.Item>*/}\n              </SubMenu>\n              <SubMenu key=\"sub3\" icon={<NotificationOutlined />} title=\"subnav 3\">\n              {/*  <Menu.Item key=\"9\">option9</Menu.Item>*/}\n              {/*  <Menu.Item key=\"10\">option10</Menu.Item>*/}\n              {/*  <Menu.Item key=\"11\">option11</Menu.Item>*/}\n              {/*  <Menu.Item key=\"12\">option12</Menu.Item>*/}\n              </SubMenu>\n            </Menu>\n          </Sider>\n          <Layout style={{ padding: '0 24px 24px' }}>\n            <Breadcrumb style={{ margin: '16px 0' }}>\n              <Breadcrumb.Item>Home</Breadcrumb.Item>\n              <Breadcrumb.Item>List</Breadcrumb.Item>\n              <Breadcrumb.Item>App</Breadcrumb.Item>\n            </Breadcrumb>\n            <Content>\n              <Switch>\n                <Route exact path='/'\n                       render = { () => <Redirect to = {'/profile'}/> } />\n                <Route path='/profile/:userId?'\n                       render = { () => <SuspendedProfile/> }/>\n                <Route path='/dialogs'\n                       render = { () => <SuspendedDialogs/> }/>\n                <Route path='/users'\n                       render = { () => <UsersPage pageTitle={'SAMYRAI'} /> } />\n                <Route path='/login'\n                       render = { () => <LoginPage /> } />\n                <Route path='*'\n                       render = { () => <div>404 - page not found</div> } />\n              </Switch>\n            </Content>\n          </Layout>\n        </Layout>\n      </Layout>\n\t\t\t)\n\t}\n}\n// @ts-ignore\nconst mapStateToProps = (state: AllAppTypes) => ({\n\t\tinitialized: state.App.initialized\n})\n// @ts-ignore\nconst AppContainer = compose<React.ComponentType>(\n\twithRouter,\n  connect(mapStateToProps , {initializeApp}))(App);\n// @ts-ignore\nconst SamuraiJSApp: React.FC = () => {\n  return <BrowserRouter>\n    <Provider store={ store }>\n      <AppContainer/>\n    </Provider>\n  </BrowserRouter>\n}\n// @ts-ignore\nexport default SamuraiJSApp","import React from 'react';\nimport ReactDOM from \"react-dom\"\nimport './index.css';\nimport * as serviceWorker from './serviceWorker';\nimport SamuraiJSApp from \"./App\";\n\nReactDOM.render( <SamuraiJSApp/>, document.getElementById('root'))\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","import React from \"react\"\nimport s from './FormControls.module.css'\nimport {Field, WrappedFieldMetaProps, WrappedFieldProps} from \"redux-form\"\nimport {FieldValidatorType} from \"../../../utils/validators/validators\";\n\ntype FormControlPropsType = {\n  meta: WrappedFieldMetaProps\n}\n\nexport const FormControl:React.FC <FormControlPropsType> = ({ meta: {touched, error},\n                                                              children}) => {\n\tconst hasError = touched && error\n\treturn (\n\t\t<>\n\t\t\t<div className={s.formControl + '' + (hasError ? s.error : '') }>\n\t\t\t\t{children}\n\t\t\t</div>\n\t\t\t{ hasError && <span>{error}</span>}\n\t\t</>\n\t)\n}\n\nexport const Textarea: React.FC<WrappedFieldProps> = (props) => {\n\t// const {input, meta, child, ...restProps} = props\n\tconst {input, meta, ...restProps} = props\n\treturn <FormControl {...props}><textarea {...input}{...restProps} /></FormControl>\n}\n\nexport const Input: React.FC <WrappedFieldProps> = (props) => {\n\t// const {input, meta, child, ...restProps} = props\n\tconst {input, meta, ...restProps} = props\n\treturn <FormControl {...props}><input {...input}{...restProps} /></FormControl>\n}\n\nexport function createField<FormKeysType extends string> (placeholder: string | undefined,\n                            name: FormKeysType,\n                            validators: Array<FieldValidatorType>,\n                            component: React.FC<WrappedFieldProps>,\n                            props = {}, text='')  {\n\treturn <div>\n\t\t<Field placeholder = {placeholder}\n           name={name}\n\t\t\t     validate = {validators}\n\t\t\t     component = {component}\n           {...props}\n\t\t/> {text}\n\t</div>\n}\n\nexport type GetStringKeys<T> = Extract<keyof T, string>","import React from \"react\";\nimport s from './preloader.module.sass'\nimport preloader from '../../../img/preloader.gif'\n\nexport const Preloader: React.FC = ( ) => {\n\treturn <div className={s.preloader}>\n\t\t<img src={preloader} alt={'descriptions'}/>\n\t</div>\n}","// extracted by mini-css-extract-plugin\nmodule.exports = {\"formControl\":\"FormControls_formControl__2SPvv\",\"error\":\"FormControls_error__3zfBa\",\"formSummaryError\":\"FormControls_formSummaryError__2ffxR\"};","export type FieldValidatorType = (value: string) => string | undefined\n\nexport const required: FieldValidatorType = (value) => {\n    if ( value ) return undefined\n    return 'Field is required'\n}\n\nexport const maxLengthCreator = (maxLength: number): FieldValidatorType => (value) => {\n    if (value.length > maxLength) return `Max length is ${maxLength} symbol`\n    return undefined\n}\n"],"sourceRoot":""}