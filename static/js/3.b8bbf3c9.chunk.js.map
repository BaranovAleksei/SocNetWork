{"version":3,"sources":["components/Dialogs/Dialogs.module.sass","hoc/withAuthRedirect.tsx","components/Dialogs/DialogItem/DialogItem.tsx","components/Dialogs/Message/Message.tsx","components/Dialogs/Dialogs.tsx","components/Dialogs/DialogsContainer.tsx"],"names":["module","exports","mapStateToPropsForRedirect","state","isAuth","Auth","withAuthRedirect","Component","RedirectComponent","this","props","to","React","connect","DialogItem","className","s","nameDialog","name","Message","messageOver","message","Dialogs","dialogs","dialogsItems","map","dial","id","messagesOver","messages","mes","AddMessageFormRedux","onSubmit","values","addMessage","newMessageBody","maxLength100","maxLengthCreator","reduxForm","form","handleSubmit","Field","component","Textarea","validate","required","placeholder","compose","DialogsPage","dispatch","action","sendMessage"],"mappings":"6FACAA,EAAOC,QAAU,CAAC,QAAU,yBAAyB,aAAe,8BAA8B,WAAa,4BAA4B,aAAe,8BAA8B,YAAc,+B,sICIhMC,EAA6B,SAAEC,GAAF,MAA2B,CAC7DC,OAAQD,EAAME,KAAKD,SAGPE,EAAmB,SAAEC,GAAqB,IAChDC,EAD+C,uKAGnD,OAAKC,KAAKC,MAAMN,OACT,kBAACG,EAAcE,KAAKC,OADI,kBAAC,IAAD,CAAUC,GAAK,eAHK,GACrBC,IAAML,WAMtC,OAAOM,YAAQX,EAARW,CAAoCL,K,8ECRrC,SAASM,EAAYJ,GAC1B,OACE,yBAAKK,UAAWC,IAAEC,YAChB,kCAAQP,EAAMQ,KAAd,MCHC,SAASC,EAAST,GACvB,OACE,yBAAKK,UAAYC,IAAEI,aACjB,8BAAOV,EAAMW,U,qCCeNC,EAAwC,SAACZ,GAcpD,OACE,yBAAKK,UAAWC,IAAEO,SAChB,yBAAKR,UAAWC,IAAEQ,cACdd,EAAMa,QAAQE,KAAK,SAACC,GAAD,OAA0B,kBAACZ,EAAD,CAAYI,KAASQ,EAAKR,KAAOS,GAAOD,EAAKC,SAE9F,yBAAKZ,UAAWC,IAAEY,cACdlB,EAAMmB,SAASJ,KAAK,SAACK,GAAD,OAA0B,kBAACX,EAAD,CAASQ,GAAMG,EAAIH,GAAKN,QAAUS,EAAIT,aACtF,kBAACU,EAAD,CAAqBC,SAXP,SAACC,GACnBvB,EAAMwB,WAAWD,EAAOE,sBAetBC,EAAeC,YAAiB,KAchCN,EAAsBO,YAAU,CAACC,KAAM,wBAAjBD,EAZL,SAAC5B,GACtB,OAAQ,oCACN,0BAAMsB,SAAWtB,EAAM8B,cACrB,kBAACC,EAAA,EAAD,CAAOC,UAAWC,IACXzB,KAAO,iBACP0B,SAAY,CAACC,IAAUT,GACvBU,YAAY,uBACnB,oD,iCCKSC,sBACblC,aAxBsB,SAAEV,GACxB,MAAO,CACLoB,QAASpB,EAAM6C,YAAYzB,QAC3BM,SAAU1B,EAAM6C,YAAYnB,aAOL,SAAEoB,GAC3B,MAAO,CAKLf,WAAY,SAACC,GACX,IAAMe,EAASC,YAAahB,GAC5Bc,EAAUC,QAOd5C,IAFayC,EAtCwC,SAAC,GAGoB,IAHlBxB,EAGiB,EAHjBA,QACAM,EAEiB,EAFjBA,SAEAK,EAAiB,EAAjBA,WACxD,OACE,kBAAC,EAAD,CAASX,QAASA,EACTM,SAAUA,EACVK,WAAYA","file":"static/js/3.b8bbf3c9.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"dialogs\":\"Dialogs_dialogs__fvJMV\",\"dialogsItems\":\"Dialogs_dialogsItems__1Less\",\"nameDialog\":\"Dialogs_nameDialog__1Hvqt\",\"messagesOver\":\"Dialogs_messagesOver__3cusD\",\"messageOver\":\"Dialogs_messageOver__10OZK\"};","import React from 'react'\nimport {Redirect} from \"react-router-dom\";\nimport {connect} from \"react-redux\";\nimport {AllAppTypes} from \"../redux/redux-store\";\n\nconst mapStateToPropsForRedirect = ( state: AllAppTypes ) => ({\n\tisAuth: state.Auth.isAuth\n})\n\nexport const withAuthRedirect = ( Component: any ) => {\n\tclass RedirectComponent extends React.Component<any, any> {\n\t\trender() {\n\t\t\tif (!this.props.isAuth) return <Redirect to = '/login' />\n\t\t\treturn <Component {...this.props} />\n\t\t}\n\t}\n\treturn connect(mapStateToPropsForRedirect)(RedirectComponent)\n}","import React from 'react';\nimport s from './../Dialogs.module.sass';\n\ntype DialogItemType = {\n  name: string\n  id: number\n}\n\nexport function DialogItem (props: DialogItemType) {\n  return (\n    <div className={s.nameDialog}>\n      <span> {props.name} </span>\n    </div>\n  )\n}","import React from 'react';\nimport s from './../Dialogs.module.sass';\n\nexport type MessagesType = {\n  id: number\n  message: string\n}\n\nexport function Message (props: MessagesType) {\n  return (\n    <div className={ s.messageOver }>\n      <span>{props.message}</span>\n    </div>\n  )\n}","import React, { ChangeEvent } from 'react';\nimport s from './Dialogs.module.sass';\nimport { DialogItem } from './DialogItem/DialogItem';\nimport { Message } from \"./Message/Message\";\nimport { Redirect } from 'react-router-dom';\nimport {reduxForm, Field } from \"redux-form\";\nimport {Textarea} from \"../common/FormsControls/FormsControls\";\nimport {maxLengthCreator, required} from \"../../Utils/Validators/validators\";\n\ntype DialogsType = {\n  id: number\n  name: string\n}\ntype MessagesType = {\n  id: number\n  message: string\n};\n\ntype DialogsPropsType = {\n  dialogs: Array<DialogsType>\n  messages: Array<MessagesType>\n  // messageForNewMessage: string\n  // changeMessage: ( text: string) => void\n  addMessage: (string: string ) => void\n}\n\nexport const Dialogs: React.FC< DialogsPropsType > = (props) => {\n\n  // const changeMessage = ( e: ChangeEvent<HTMLInputElement> ) => {\n  //   const text = e.currentTarget.value;\n  //   props.changeMessage( text );\n  // };\n  // const addMessage = (newMessage: string) => {\n  //   props.addMessage(newMessage);\n  // }\n\n  let addNewMessage = (values: any) => {\n    props.addMessage(values.newMessageBody)\n  }\n\n  return (\n    <div className={s.dialogs}>\n      <div className={s.dialogsItems}>\n        { props.dialogs.map( (dial: DialogsType ) => ( <DialogItem name = { dial.name } id = { dial.id }/> ))}\n      </div>\n      <div className={s.messagesOver}>\n        { props.messages.map( (mes: MessagesType ) => ( <Message id = {mes.id}  message={ mes.message}/> ))}\n        <AddMessageFormRedux onSubmit={addNewMessage}/>\n      </div>\n    </div>\n  )\n}\nconst maxLength100 = maxLengthCreator(100)\n\nconst AddMessageForm = (props:any) => {\n  return  <>\n    <form onSubmit={ props.handleSubmit }>\n      <Field component={Textarea}\n             name = 'newMessageBody'\n             validate = {[required, maxLength100]}\n             placeholder='Enter your message'/>\n      <button>add Message</button>\n    </form>\n  </>\n}\n\nconst AddMessageFormRedux = reduxForm({form: 'dialogAddMessageForm'})(AddMessageForm)","import React  from 'react';\nimport {Dialogs} from \"./Dialogs\";\nimport {connect} from \"react-redux\";\nimport { sendMessage} from \"../../redux/dialogspage-reducer\"\nimport { AllAppTypes } from '../../redux/redux-store'\nimport {withAuthRedirect} from \"../../hoc/withAuthRedirect\"\nimport { compose } from 'redux';\n\ntype DialogsType = {\n  id: number\n  name: string\n}\ntype MessagesType = {\n  id: number\n  message: string\n}\ntype mapStateToPropsType = {\n  dialogs: Array<DialogsType>\n  messages: Array<MessagesType>\n  // messageForNewMessage: string\n}\ntype mapDispatchToPropsType = {\n  // changeMessage: ( text: string) => void\n  addMessage: (newMessage: string) => void\n}\n\ntype DialogsContainerPT = mapStateToPropsType & mapDispatchToPropsType\n\nconst DialogsContainer: React.FC<DialogsContainerPT> = ({ dialogs,\n                                                          messages,\n                                                          // messageForNewMessage,\n                                                          addMessage }) => {\n  return (\n    <Dialogs dialogs={dialogs}\n             messages={messages}\n             addMessage={addMessage}\n             // changeMessage={changeMessage}\n             // messageForNewMessage={messageForNewMessage}/>\n             // isAuth={ isAuth }\n    />\n  )\n}\n\nconst mapStateToProps = ( state: AllAppTypes ): mapStateToPropsType => {\n  return {\n    dialogs: state.DialogsPage.dialogs,\n    messages: state.DialogsPage.messages,\n    // messageForNewMessage: state.DialogsPage.messageForNewMessage\n    // isAuth: state.Auth.isAuth\n  }\n}\n\n\nconst mapDispatchToProps = ( dispatch: any): mapDispatchToPropsType => {\n  return {\n    // changeMessage:  ( text: string ) => {\n    //   const action = changeMessageBody(text);\n    //   dispatch (action);\n    // },\n    addMessage: (newMessageBody: string) => {\n      const action = sendMessage( newMessageBody)\n      dispatch( action );\n    }\n  }\n}\n\nexport default compose<React.ComponentType> (\n  connect< mapStateToPropsType, mapDispatchToPropsType, {}, AllAppTypes>(mapStateToProps, mapDispatchToProps),\n  withAuthRedirect\n)(DialogsContainer);"],"sourceRoot":""}